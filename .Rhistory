num_wins = double(2)
win_ratio = double(2)
print(num_switches)
for(i in 1:10){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio)
plot(1:2,win_ratio, ylim=(0,1))
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
print(num_switches)
for(i in 1:10){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio)
plot(1:2,win_ratio, ylim=0:1)
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
print(num_switches)
for(i in 1:10){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio)
plot(1:2,win_ratio, ylim=0:1)
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
print(num_switches)
for(i in 1:100){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio)
plot(1:2,win_ratio, ylim=0:1)
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
print(num_switches)
for(i in 1:100){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:100){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:1000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:1000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:10000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:10000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:10000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:10000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:10000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:10000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:10000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:10000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:10000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:10000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:10000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:1000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:1000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
plot(1:2,win_ratio, "s")
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:1000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print(win_ratio[1])
print(win_ratio[2])
plot(1:2,win_ratio)
doors = c(1,2,3)
switch = c(1,2)     #1=switch 2=stay
num_switches = double(2)
num_wins = double(2)
win_ratio = double(2)
for(i in 1:1000){
prize = sample(doors, 1)         #prize is placed behind a door
chosen = sample(doors, 1)        #contestant picks a door
open = sample(doors[which(doors != prize & doors != chosen)],1)
choice = sample(switch,1)
if(choice == 1){
chosen = sample(doors[which(doors != open & doors != chosen)],1)
} #contestant wants to switch
num_switches[choice] = num_switches[choice] + 1
if(chosen == prize){
num_wins[choice] = num_wins[choice] + 1
}#update win count
}
win_ratio[1] = (num_wins[1]) / (num_switches[1])
win_ratio[2] = (num_wins[2]) / (num_switches[2])
print("Win ratio when switching: ")
print(win_ratio[1])
print("Win ratio when staying: ")
print(win_ratio[2])
